{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.registerAll = exports.validateLoadBalancingConfig = exports.getFirstUsableConfig = exports.isLoadBalancerNameRegistered = exports.createLoadBalancer = exports.registerLoadBalancerType = void 0;\n\nconst load_balancer_pick_first = require(\"./load-balancer-pick-first\");\n\nconst load_balancer_round_robin = require(\"./load-balancer-round-robin\");\n\nconst registeredLoadBalancerTypes = {};\n\nfunction registerLoadBalancerType(typeName, loadBalancerType, loadBalancingConfigType) {\n  registeredLoadBalancerTypes[typeName] = {\n    LoadBalancer: loadBalancerType,\n    LoadBalancingConfig: loadBalancingConfigType\n  };\n}\n\nexports.registerLoadBalancerType = registerLoadBalancerType;\n\nfunction createLoadBalancer(config, channelControlHelper) {\n  const typeName = config.getLoadBalancerName();\n\n  if (typeName in registeredLoadBalancerTypes) {\n    return new registeredLoadBalancerTypes[typeName].LoadBalancer(channelControlHelper);\n  } else {\n    return null;\n  }\n}\n\nexports.createLoadBalancer = createLoadBalancer;\n\nfunction isLoadBalancerNameRegistered(typeName) {\n  return typeName in registeredLoadBalancerTypes;\n}\n\nexports.isLoadBalancerNameRegistered = isLoadBalancerNameRegistered;\n\nfunction getFirstUsableConfig(configs, defaultPickFirst = false) {\n  for (const config of configs) {\n    if (config.getLoadBalancerName() in registeredLoadBalancerTypes) {\n      return config;\n    }\n  }\n\n  if (defaultPickFirst) {\n    return new load_balancer_pick_first.PickFirstLoadBalancingConfig();\n  } else {\n    return null;\n  }\n}\n\nexports.getFirstUsableConfig = getFirstUsableConfig;\n\nfunction validateLoadBalancingConfig(obj) {\n  if (!(obj !== null && typeof obj === 'object')) {\n    throw new Error('Load balancing config must be an object');\n  }\n\n  const keys = Object.keys(obj);\n\n  if (keys.length !== 1) {\n    throw new Error('Provided load balancing config has multiple conflicting entries');\n  }\n\n  const typeName = keys[0];\n\n  if (typeName in registeredLoadBalancerTypes) {\n    return registeredLoadBalancerTypes[typeName].LoadBalancingConfig.createFromJson(obj[typeName]);\n  } else {\n    throw new Error(`Unrecognized load balancing config name ${typeName}`);\n  }\n}\n\nexports.validateLoadBalancingConfig = validateLoadBalancingConfig;\n\nfunction registerAll() {\n  load_balancer_pick_first.setup();\n  load_balancer_round_robin.setup();\n}\n\nexports.registerAll = registerAll;","map":{"version":3,"sources":["../../src/load-balancer.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;AAeG;;;;;;;AAMH,MAAA,wBAAA,GAAA,OAAA,CAAA,4BAAA,CAAA;;AACA,MAAA,yBAAA,GAAA,OAAA,CAAA,6BAAA,CAAA;;AAsFA,MAAM,2BAA2B,GAK7B,EALJ;;AAOA,SAAgB,wBAAhB,CACE,QADF,EAEE,gBAFF,EAGE,uBAHF,EAGyD;AAEvD,EAAA,2BAA2B,CAAC,QAAD,CAA3B,GAAwC;AACtC,IAAA,YAAY,EAAE,gBADwB;AAEtC,IAAA,mBAAmB,EAAE;AAFiB,GAAxC;AAID;;AATD,OAAA,CAAA,wBAAA,GAAA,wBAAA;;AAWA,SAAgB,kBAAhB,CACE,MADF,EAEE,oBAFF,EAE4C;AAE1C,QAAM,QAAQ,GAAG,MAAM,CAAC,mBAAP,EAAjB;;AACA,MAAI,QAAQ,IAAI,2BAAhB,EAA6C;AAC3C,WAAO,IAAI,2BAA2B,CAAC,QAAD,CAA3B,CAAsC,YAA1C,CAAuD,oBAAvD,CAAP;AACD,GAFD,MAEO;AACL,WAAO,IAAP;AACD;AACF;;AAVD,OAAA,CAAA,kBAAA,GAAA,kBAAA;;AAYA,SAAgB,4BAAhB,CAA6C,QAA7C,EAA6D;AAC3D,SAAO,QAAQ,IAAI,2BAAnB;AACD;;AAFD,OAAA,CAAA,4BAAA,GAAA,4BAAA;;AAKA,SAAgB,oBAAhB,CACE,OADF,EAEE,gBAAA,GAA4B,KAF9B,EAEmC;AAEjC,OAAK,MAAM,MAAX,IAAqB,OAArB,EAA8B;AAC5B,QAAI,MAAM,CAAC,mBAAP,MAAgC,2BAApC,EAAiE;AAC/D,aAAO,MAAP;AACD;AACF;;AACD,MAAI,gBAAJ,EAAsB;AACpB,WAAO,IAAI,wBAAwB,CAAC,4BAA7B,EAAP;AACD,GAFD,MAEO;AACL,WAAO,IAAP;AACD;AACF;;AAdD,OAAA,CAAA,oBAAA,GAAA,oBAAA;;AAgBA,SAAgB,2BAAhB,CAA4C,GAA5C,EAAoD;AAClD,MAAI,EAAE,GAAG,KAAK,IAAR,IAAkB,OAAO,GAAP,KAAe,QAAnC,CAAJ,EAAmD;AACjD,UAAM,IAAI,KAAJ,CAAU,yCAAV,CAAN;AACD;;AACD,QAAM,IAAI,GAAG,MAAM,CAAC,IAAP,CAAY,GAAZ,CAAb;;AACA,MAAI,IAAI,CAAC,MAAL,KAAgB,CAApB,EAAuB;AACrB,UAAM,IAAI,KAAJ,CAAU,iEAAV,CAAN;AACD;;AACD,QAAM,QAAQ,GAAG,IAAI,CAAC,CAAD,CAArB;;AACA,MAAI,QAAQ,IAAI,2BAAhB,EAA6C;AAC3C,WAAO,2BAA2B,CAAC,QAAD,CAA3B,CAAsC,mBAAtC,CAA0D,cAA1D,CAAyE,GAAG,CAAC,QAAD,CAA5E,CAAP;AACD,GAFD,MAEO;AACL,UAAM,IAAI,KAAJ,CAAU,2CAA2C,QAAQ,EAA7D,CAAN;AACD;AACF;;AAdD,OAAA,CAAA,2BAAA,GAAA,2BAAA;;AAgBA,SAAgB,WAAhB,GAA2B;AACzB,EAAA,wBAAwB,CAAC,KAAzB;AACA,EAAA,yBAAyB,CAAC,KAA1B;AACD;;AAHD,OAAA,CAAA,WAAA,GAAA,WAAA","sourceRoot":"","sourcesContent":["\"use strict\";\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.registerAll = exports.validateLoadBalancingConfig = exports.getFirstUsableConfig = exports.isLoadBalancerNameRegistered = exports.createLoadBalancer = exports.registerLoadBalancerType = void 0;\nconst load_balancer_pick_first = require(\"./load-balancer-pick-first\");\nconst load_balancer_round_robin = require(\"./load-balancer-round-robin\");\nconst registeredLoadBalancerTypes = {};\nfunction registerLoadBalancerType(typeName, loadBalancerType, loadBalancingConfigType) {\n    registeredLoadBalancerTypes[typeName] = {\n        LoadBalancer: loadBalancerType,\n        LoadBalancingConfig: loadBalancingConfigType\n    };\n}\nexports.registerLoadBalancerType = registerLoadBalancerType;\nfunction createLoadBalancer(config, channelControlHelper) {\n    const typeName = config.getLoadBalancerName();\n    if (typeName in registeredLoadBalancerTypes) {\n        return new registeredLoadBalancerTypes[typeName].LoadBalancer(channelControlHelper);\n    }\n    else {\n        return null;\n    }\n}\nexports.createLoadBalancer = createLoadBalancer;\nfunction isLoadBalancerNameRegistered(typeName) {\n    return typeName in registeredLoadBalancerTypes;\n}\nexports.isLoadBalancerNameRegistered = isLoadBalancerNameRegistered;\nfunction getFirstUsableConfig(configs, defaultPickFirst = false) {\n    for (const config of configs) {\n        if (config.getLoadBalancerName() in registeredLoadBalancerTypes) {\n            return config;\n        }\n    }\n    if (defaultPickFirst) {\n        return new load_balancer_pick_first.PickFirstLoadBalancingConfig();\n    }\n    else {\n        return null;\n    }\n}\nexports.getFirstUsableConfig = getFirstUsableConfig;\nfunction validateLoadBalancingConfig(obj) {\n    if (!(obj !== null && (typeof obj === 'object'))) {\n        throw new Error('Load balancing config must be an object');\n    }\n    const keys = Object.keys(obj);\n    if (keys.length !== 1) {\n        throw new Error('Provided load balancing config has multiple conflicting entries');\n    }\n    const typeName = keys[0];\n    if (typeName in registeredLoadBalancerTypes) {\n        return registeredLoadBalancerTypes[typeName].LoadBalancingConfig.createFromJson(obj[typeName]);\n    }\n    else {\n        throw new Error(`Unrecognized load balancing config name ${typeName}`);\n    }\n}\nexports.validateLoadBalancingConfig = validateLoadBalancingConfig;\nfunction registerAll() {\n    load_balancer_pick_first.setup();\n    load_balancer_round_robin.setup();\n}\nexports.registerAll = registerAll;\n//# sourceMappingURL=load-balancer.js.map"]},"metadata":{},"sourceType":"script"}