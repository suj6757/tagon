{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setup = void 0;\n\nconst resolver_1 = require(\"./resolver\");\n\nclass UdsResolver {\n  constructor(target, listener, channelOptions) {\n    this.listener = listener;\n    this.addresses = [];\n    let path;\n\n    if (target.authority === '') {\n      path = '/' + target.path;\n    } else {\n      path = target.path;\n    }\n\n    this.addresses = [{\n      path\n    }];\n  }\n\n  updateResolution() {\n    process.nextTick(this.listener.onSuccessfulResolution, this.addresses, null, null, null, {});\n  }\n\n  destroy() {// This resolver owns no resources, so we do nothing here.\n  }\n\n  static getDefaultAuthority(target) {\n    return 'localhost';\n  }\n\n}\n\nfunction setup() {\n  resolver_1.registerResolver('unix', UdsResolver);\n}\n\nexports.setup = setup;","map":{"version":3,"sources":["../../src/resolver-uds.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;AAcG;;;;;;;AAEH,MAAA,UAAA,GAAA,OAAA,CAAA,YAAA,CAAA;;AAKA,MAAM,WAAN,CAAiB;AAEf,EAAA,WAAA,CACE,MADF,EAEU,QAFV,EAGE,cAHF,EAGgC;AADtB,SAAA,QAAA,GAAA,QAAA;AAHF,SAAA,SAAA,GAAiC,EAAjC;AAMN,QAAI,IAAJ;;AACA,QAAI,MAAM,CAAC,SAAP,KAAqB,EAAzB,EAA6B;AAC3B,MAAA,IAAI,GAAG,MAAM,MAAM,CAAC,IAApB;AACD,KAFD,MAEO;AACL,MAAA,IAAI,GAAG,MAAM,CAAC,IAAd;AACD;;AACD,SAAK,SAAL,GAAiB,CAAC;AAAE,MAAA;AAAF,KAAD,CAAjB;AACD;;AACD,EAAA,gBAAgB,GAAA;AACd,IAAA,OAAO,CAAC,QAAR,CACE,KAAK,QAAL,CAAc,sBADhB,EAEE,KAAK,SAFP,EAGE,IAHF,EAIE,IAJF,EAKE,IALF,EAME,EANF;AAQD;;AAED,EAAA,OAAO,GAAA,CACL;AACD;;AAEyB,SAAnB,mBAAmB,CAAC,MAAD,EAAgB;AACxC,WAAO,WAAP;AACD;;AAhCc;;AAmCjB,SAAgB,KAAhB,GAAqB;AACnB,EAAA,UAAA,CAAA,gBAAA,CAAiB,MAAjB,EAAyB,WAAzB;AACD;;AAFD,OAAA,CAAA,KAAA,GAAA,KAAA","sourceRoot":"","sourcesContent":["\"use strict\";\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.setup = void 0;\nconst resolver_1 = require(\"./resolver\");\nclass UdsResolver {\n    constructor(target, listener, channelOptions) {\n        this.listener = listener;\n        this.addresses = [];\n        let path;\n        if (target.authority === '') {\n            path = '/' + target.path;\n        }\n        else {\n            path = target.path;\n        }\n        this.addresses = [{ path }];\n    }\n    updateResolution() {\n        process.nextTick(this.listener.onSuccessfulResolution, this.addresses, null, null, null, {});\n    }\n    destroy() {\n        // This resolver owns no resources, so we do nothing here.\n    }\n    static getDefaultAuthority(target) {\n        return 'localhost';\n    }\n}\nfunction setup() {\n    resolver_1.registerResolver('unix', UdsResolver);\n}\nexports.setup = setup;\n//# sourceMappingURL=resolver-uds.js.map"]},"metadata":{},"sourceType":"script"}