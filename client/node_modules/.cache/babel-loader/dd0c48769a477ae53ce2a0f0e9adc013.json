{"ast":null,"code":"var _jsxFileName = \"D:\\\\songGit\\\\tagon\\\\client\\\\src\\\\components\\\\body\\\\StateTest.js\";\nimport React from 'react';\nimport Header from '../head/Header';\nimport Chart from '../body/Chart';\nimport { post } from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass StateTest extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = () => {//this.callApi();\n    };\n\n    this.callApi = async () => {\n      let url = '/api/customerChart';\n      const formData = new FormData();\n      formData.append('param', this.state.call);\n      const config = {\n        headers: {\n          'content-type': 'multipart/form-data'\n        }\n      };\n      post(url, formData, config).then(response => {\n        this.makeData(response);\n      });\n    };\n\n    this.makeData = item => {\n      let categories = [];\n      let data = [];\n      item.data.map(c => {\n        return categories.push(`${c.JOB}`), data.push(`${c.COUNT}`);\n      });\n      this.setState({\n        series: [{\n          name: 'tobe',\n          data: data\n        }],\n        options: {\n          chart: {\n            height: 350,\n            type: 'line',\n            zoom: {\n              enabled: false\n            }\n          },\n          dataLabels: {\n            enabled: false\n          },\n          stroke: {\n            curve: 'straight'\n          },\n          title: {\n            text: '직업별 비율',\n            align: 'left'\n          },\n          grid: {\n            row: {\n              colors: ['#f3f3f3', 'transparent'],\n              // takes an array which will be repeated on columns\n              opacity: 0.5\n            }\n          },\n          xaxis: {\n            categories: categories\n          }\n        }\n      });\n    };\n\n    this.callBack = data => {\n      this.setState({\n        call: data\n      }, () => {\n        this.callApi();\n      });\n    };\n\n    this.state = {\n      series: [{\n        name: \"Desktops\",\n        data: []\n      }],\n      options: {\n        chart: {\n          height: 350,\n          type: 'line',\n          zoom: {\n            enabled: false\n          }\n        },\n        dataLabels: {\n          enabled: false\n        },\n        stroke: {\n          curve: 'straight'\n        },\n        title: {\n          text: 'Product Trends by Month',\n          align: 'left'\n        },\n        grid: {\n          row: {\n            colors: ['#f3f3f3', 'transparent'],\n            // takes an array which will be repeated on columns\n            opacity: 0.5\n          }\n        },\n        xaxis: {\n          categories: []\n        }\n      },\n      call: []\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        call: this.callBack\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Chart, {\n        options: this.state.options,\n        series: this.state.series,\n        type: \"line\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default StateTest;","map":{"version":3,"sources":["D:/songGit/tagon/client/src/components/body/StateTest.js"],"names":["React","Header","Chart","post","StateTest","Component","constructor","props","componentDidMount","callApi","url","formData","FormData","append","state","call","config","headers","then","response","makeData","item","categories","data","map","c","push","JOB","COUNT","setState","series","name","options","chart","height","type","zoom","enabled","dataLabels","stroke","curve","title","text","align","grid","row","colors","opacity","xaxis","callBack","render"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport Header from '../head/Header';\r\nimport Chart from '../body/Chart';\r\nimport { post } from 'axios';\r\n\r\nclass StateTest extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            series: [{\r\n                name: \"Desktops\",\r\n                data: []\r\n            }],\r\n            options: {\r\n                chart: {\r\n                    height: 350,\r\n                    type: 'line',\r\n                    zoom: {\r\n                        enabled: false\r\n                    }\r\n                },\r\n                dataLabels: {\r\n                    enabled: false\r\n                },\r\n                stroke: {\r\n                    curve: 'straight'\r\n                },\r\n                title: {\r\n                    text: 'Product Trends by Month',\r\n                    align: 'left'\r\n                },\r\n                grid: {\r\n                    row: {\r\n                        colors: ['#f3f3f3', 'transparent'], // takes an array which will be repeated on columns\r\n                        opacity: 0.5\r\n                    },\r\n                },\r\n                xaxis: {\r\n                    categories: []\r\n                }\r\n            },\r\n            call : []\r\n        };\r\n    }\r\n    \r\n    componentDidMount = () => {\r\n        //this.callApi();\r\n    }\r\n\r\n    callApi = async () => {\r\n        let url = '/api/customerChart';\r\n        const formData = new FormData();\r\n        \r\n        formData.append('param', this.state.call);\r\n\r\n        const config = {\r\n            headers : {\r\n                'content-type' : 'multipart/form-data'\r\n            }\r\n        }\r\n\r\n        post(url, formData, config).then((response) => {\r\n            this.makeData(response);\r\n        });\r\n    }\r\n\r\n    makeData = (item) => {\r\n        let categories = [];\r\n        let data = [];\r\n\r\n        item.data.map((c) => {\r\n            return (\r\n                categories.push(`${c.JOB}`)\r\n            ,   data.push(`${c.COUNT}`)\r\n            )\r\n        });\r\n        \r\n        this.setState({\r\n            series : [{\r\n                name : 'tobe'\r\n            ,   data : data\r\n            }]\r\n        ,   options: {\r\n                chart: {\r\n                    height: 350,\r\n                    type: 'line',\r\n                    zoom: {\r\n                        enabled: false\r\n                    }\r\n                },\r\n                dataLabels: {\r\n                    enabled: false\r\n                },\r\n                stroke: {\r\n                    curve: 'straight'\r\n                },\r\n                title: {\r\n                    text: '직업별 비율',\r\n                    align: 'left'\r\n                },\r\n                grid: {\r\n                    row: {\r\n                        colors: ['#f3f3f3', 'transparent'], // takes an array which will be repeated on columns\r\n                        opacity: 0.5\r\n                    },\r\n                },\r\n                xaxis: {\r\n                    categories: categories\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    callBack = (data) => {\r\n        this.setState({\r\n            call : data\r\n        }, () => {\r\n            this.callApi();\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <Header call={this.callBack} />\r\n                <Chart options={this.state.options} series={this.state.series} type=\"line\" />\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default StateTest;"]},"metadata":{},"sourceType":"module"}