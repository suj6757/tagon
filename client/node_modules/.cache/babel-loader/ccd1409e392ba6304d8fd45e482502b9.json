{"ast":null,"code":"var _jsxFileName = \"D:\\\\songGit\\\\tagon\\\\client\\\\src\\\\components\\\\body\\\\Login.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass Login extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.saveId = () => {\n      window.sessionStorage.setItem(\"ID\", this.state.id);\n    };\n\n    this.state = {\n      id: '',\n      pw: ''\n    };\n\n    var grpcjs = require('@grpc/grpc-js');\n\n    var protoLoader = require('@grpc/proto-loader');\n\n    var PROTO_PATH_TEST = __dirname + '/LoginService.proto';\n    var packageDefinition_Test = protoLoader.loadSync(PROTO_PATH_TEST, {\n      keepCase: true,\n      longs: String,\n      enums: String,\n      defaults: true,\n      oneofs: true\n    });\n    var protoDescriptor_Test = grpcjs.loadPackageDefinition(packageDefinition_Test);\n    var client_Test = new protoDescriptor_Test.LoginService.UserInfo('203.245.41.17:50052', grpcjs.credentials.createInsecure()); // 방식 1\n\n    var data1 = protoDescriptor_Test.LoginService.Request_UserInfo;\n    data1.Userid = \"testuser\";\n    data1.UserPassword = \"1234\"; // 방식 2\n\n    var data2 = {\n      UserId: \"testuser\",\n      UserPassword: \"1234\"\n    };\n    client_Test.Login(data2, function (err, data) {\n      try {\n        console.log('error : ', err);\n        console.log(data);\n        console.log(data.Message);\n      } catch (ex) {\n        console.log(ex);\n      }\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"ID : \", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"id\",\n          value: this.state.id,\n          onChange: ({\n            target: {\n              value\n            }\n          }) => this.setState({\n            id: value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 27\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"PW : \", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          name: \"pw\",\n          value: this.state.pw,\n          onChange: ({\n            target: {\n              value\n            }\n          }) => this.setState({\n            pw: value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 27\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: this.saveId,\n          children: \"\\uB85C\\uADF8\\uC778\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 22\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default Login;","map":{"version":3,"sources":["D:/songGit/tagon/client/src/components/body/Login.js"],"names":["React","Login","Component","constructor","props","saveId","window","sessionStorage","setItem","state","id","pw","grpcjs","require","protoLoader","PROTO_PATH_TEST","__dirname","packageDefinition_Test","loadSync","keepCase","longs","String","enums","defaults","oneofs","protoDescriptor_Test","loadPackageDefinition","client_Test","LoginService","UserInfo","credentials","createInsecure","data1","Request_UserInfo","Userid","UserPassword","data2","UserId","err","data","console","log","Message","ex","render","target","value","setState"],"mappings":"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","sourcesContent":["import React from 'react';\r\n\r\nclass Login extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            id : ''\r\n        ,   pw : ''\r\n        }\r\n\r\n        var grpcjs = require('@grpc/grpc-js');\r\nvar protoLoader = require('@grpc/proto-loader');\r\n\r\nvar PROTO_PATH_TEST = __dirname  + '/LoginService.proto';\r\nvar packageDefinition_Test = protoLoader.loadSync(\r\n  PROTO_PATH_TEST,\r\n  {keepCase: true,\r\n   longs: String,\r\n   enums: String,\r\n   defaults: true,\r\n   oneofs: true\r\n  });\r\nvar protoDescriptor_Test = grpcjs.loadPackageDefinition(packageDefinition_Test);\r\nvar client_Test = new protoDescriptor_Test.LoginService.UserInfo('203.245.41.17:50052', grpcjs.credentials.createInsecure());\r\n\r\n// 방식 1\r\nvar data1 = protoDescriptor_Test.LoginService.Request_UserInfo\r\ndata1.Userid = \"testuser\"\r\ndata1.UserPassword = \"1234\"\r\n\r\n// 방식 2\r\nvar data2 = {\r\n  UserId : \"testuser\", \r\n  UserPassword : \"1234\", \r\n}\r\n\r\nclient_Test.Login(data2, function(err, data) {\r\n  try\r\n  {\r\n    console.log('error : ', err);\r\n    console.log(data);\r\n    console.log(data.Message);\r\n  }\r\n  catch(ex)\r\n  {\r\n    console.log(ex)\r\n  }\r\n});\r\n    }\r\n\r\n    saveId = () => {\r\n        window.sessionStorage.setItem(\"ID\", this.state.id);\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <>\r\n                <div>ID : <input type='text' name=\"id\" value={this.state.id} onChange={({target : { value }}) => this.setState({ id : value })} /></div>\r\n                <div>PW : <input type='password' name=\"pw\" value={this.state.pw} onChange={({target : { value }}) => this.setState({ pw : value })} /></div>\r\n                <div><button type=\"button\" onClick={this.saveId}>로그인</button></div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Login;"]},"metadata":{},"sourceType":"module"}